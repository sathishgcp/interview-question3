/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.demo.forum.api;

import com.example.demo.forum.model.PostQuestionReplyBody;
import com.example.demo.forum.model.PostReplyResponse;
import com.example.demo.forum.model.QuestionDetails;
import com.example.demo.forum.model.QuestionsResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-20T00:54:17.931Z")
/**
 * QuestionsApi Definitions. Generated Using Swagger Codegen:Spring.
 * API definitions include:
 *  1. addQuestion: Post Request to create a new question.
 *  2. createReply: Post Request to create a new Reply to an existing question.
 *  3. getListOfQuestions: Get request to read all questions from DB.
 *  4. getQuestionDetails: Get requset to real an input question Details.
 *
 *  Security: None
 * @Generated SwaggerIO
 */
@RestController
public interface QuestionsApi {


    /**
     * addQuestion endpoint definition.
     *
     * @param body question request body of type {@link PostQuestionReplyBody}.
     * @return QuestionDetails of the new question Added.
     */
    @RequestMapping(value = "/questions",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<QuestionDetails> addQuestion(@Valid @RequestBody(required = true) PostQuestionReplyBody body);

    /**
     * createReply endpoint definition.
     *
     * @param requestBody reply request body of type {@link PostQuestionReplyBody}.
     * @param questionId  input question to which the given reply is added.
     * @return ReplyDetails of the new reply Added of Type {@link PostReplyResponse}
     */
    @RequestMapping(value = "/questions/{questionId}/reply",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<PostReplyResponse> createReply(@PathVariable("questionId") Long questionId, @Valid @RequestBody PostQuestionReplyBody requestBody);

    /**
     * getListOfQuestions endpoint definition.
     *
     * @return list of all questions in the database of type {@link List<QuestionDetails>}
     */
    @RequestMapping(value = "/questions",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<QuestionDetails>> getListOfQuestions();

    /**
     * getQuestionDetials endpoint definition.
     *
     * @param questionId input questionId to extract the details.
     * @return questionDetails of the input question requested of type{@link QuestionsResponse}
     */
    @RequestMapping(value = "/questions/{questionId}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<QuestionsResponse> getQuestionDetails(@PathVariable("questionId") Long questionId);
}
